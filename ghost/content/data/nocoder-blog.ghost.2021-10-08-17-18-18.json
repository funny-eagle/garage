{"meta":{"exported_on":1633713498076,"version":"4.17.1"},"data":{"posts":[{"id":"616073bb67f6c500012753c5","uuid":"57129e34-6795-4d80-850d-7ccc71e65d6e","title":"About this site","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"strong\"],[\"code\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Unlike posts, pages in Ghost don't appear the main feed. They're separate, individual pages which only show up when you link to them. Great for content which is important, but separate from your usual posts.\"]]],[1,\"p\",[[0,[],0,\"An about page is a great example of one you might want to set up early on so people can find out more about you, and what you do. Why should people subscribe to your site and become a member? Details help!\"]]],[1,\"blockquote\",[[0,[0],1,\"Tip: \"],[0,[],0,\"If you're reading any post or page on your site and you notice something you want to edit, you can add \"],[0,[1],1,\"/edit\"],[0,[],0,\" to the end of the URL – and you'll be taken directly to the Ghost editor.\"]]],[1,\"p\",[[0,[],0,\"Now tell the world what your site is all about.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Unlike posts, pages in Ghost don't appear the main feed. They're separate, individual pages which only show up when you link to them. Great for content which is important, but separate from your usual posts.</p><p>An about page is a great example of one you might want to set up early on so people can find out more about you, and what you do. Why should people subscribe to your site and become a member? Details help!</p><blockquote><strong>Tip: </strong>If you're reading any post or page on your site and you notice something you want to edit, you can add <code>/edit</code> to the end of the URL – and you'll be taken directly to the Ghost editor.</blockquote><p>Now tell the world what your site is all about.</p>","comment_id":"616073bb67f6c500012753c5","plaintext":"Unlike posts, pages in Ghost don't appear the main feed. They're separate,\nindividual pages which only show up when you link to them. Great for content\nwhich is important, but separate from your usual posts.\n\nAn about page is a great example of one you might want to set up early on so\npeople can find out more about you, and what you do. Why should people subscribe\nto your site and become a member? Details help!\n\n> Tip: If you're reading any post or page on your site and you notice something\nyou want to edit, you can add /edit to the end of the URL – and you'll be taken\ndirectly to the Ghost editor.\nNow tell the world what your site is all about.","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-10-08 16:37:15","created_by":"1","updated_at":"2021-10-08 16:37:15","updated_by":"1","published_at":"2021-10-08 16:37:22","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"616073bb67f6c500012753c7","uuid":"b2141e3c-7d30-4d97-a94d-f7839d446740","title":"Contact","slug":"contact","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/integrations.png\",\"width\":2944,\"height\":1716,\"href\":\"https://ghost.org/integrations/?tag=forms\"}]],\"markups\":[[\"a\",[\"href\",\"https://twitter.com/ghost\"]],[\"a\",[\"href\",\"https://www.facebook.com/ghost\"]],[\"a\",[\"href\",\"https://instagram.com/ghost\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"If you want to set up a contact page for people to be able to reach out to you, the simplest way is to set up a simple page like this and list the different ways people can reach out to you.\"]]],[1,\"h3\",[[0,[],0,\"For example, here's how to reach us!\"]]],[3,\"ul\",[[[0,[0],1,\"@Ghost\"],[0,[],0,\" on Twitter\"]],[[0,[1],1,\"@Ghost\"],[0,[],0,\" on Facebook\"]],[[0,[2],1,\"@Ghost\"],[0,[],0,\" on Instagram\"]]]],[1,\"p\",[[0,[],0,\"If you prefer to use a contact form, almost all of the great embedded form services work great with Ghost and are easy to set up:\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>If you want to set up a contact page for people to be able to reach out to you, the simplest way is to set up a simple page like this and list the different ways people can reach out to you.</p><h3 id=\"for-example-heres-how-to-reach-us\">For example, here's how to reach us!</h3><ul><li><a href=\"https://twitter.com/ghost\">@Ghost</a> on Twitter</li><li><a href=\"https://www.facebook.com/ghost\">@Ghost</a> on Facebook</li><li><a href=\"https://instagram.com/ghost\">@Ghost</a> on Instagram</li></ul><p>If you prefer to use a contact form, almost all of the great embedded form services work great with Ghost and are easy to set up:</p><figure class=\"kg-card kg-image-card\"><a href=\"https://ghost.org/integrations/?tag=forms\"><img src=\"https://static.ghost.org/v4.0.0/images/integrations.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2944\" height=\"1716\"></a></figure>","comment_id":"616073bb67f6c500012753c7","plaintext":"If you want to set up a contact page for people to be able to reach out to you,\nthe simplest way is to set up a simple page like this and list the different\nways people can reach out to you.\n\nFor example, here's how to reach us!\n * @Ghost [https://twitter.com/ghost] on Twitter\n * @Ghost [https://www.facebook.com/ghost] on Facebook\n * @Ghost [https://instagram.com/ghost] on Instagram\n\nIf you prefer to use a contact form, almost all of the great embedded form\nservices work great with Ghost and are easy to set up:\n\n[https://ghost.org/integrations/?tag=forms]","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-10-08 16:37:15","created_by":"1","updated_at":"2021-10-08 16:37:15","updated_by":"1","published_at":"2021-10-08 16:37:23","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"616073bb67f6c500012753c9","uuid":"76937ee8-6a69-48e4-b8e6-0e002eadad1a","title":"Privacy","slug":"privacy","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news: Ghost does not use any tracking cookies of any kind.\"]]],[1,\"p\",[[0,[],0,\"You can integrate any products, services, ads or integrations with Ghost yourself if you want to, but it's always a good idea to disclose how subscriber data will be used by putting together a privacy page.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news: Ghost does not use any tracking cookies of any kind.</p><p>You can integrate any products, services, ads or integrations with Ghost yourself if you want to, but it's always a good idea to disclose how subscriber data will be used by putting together a privacy page.</p>","comment_id":"616073bb67f6c500012753c9","plaintext":"Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news:\nGhost does not use any tracking cookies of any kind.\n\nYou can integrate any products, services, ads or integrations with Ghost\nyourself if you want to, but it's always a good idea to disclose how subscriber\ndata will be used by putting together a privacy page.","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-10-08 16:37:15","created_by":"1","updated_at":"2021-10-08 16:37:15","updated_by":"1","published_at":"2021-10-08 16:37:24","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"616073bb67f6c500012753cb","uuid":"152442af-e65a-46aa-b269-17dd1eac2eaa","title":"Contribute","slug":"contribute","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"https://github.com/tryghost\"]],[\"a\",[\"href\",\"https://github.com/sponsors/TryGhost\"]],[\"a\",[\"href\",\"https://opencollective.com/ghost\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Oh hey, you clicked every link of our starter content and even clicked this small link in the footer! If you like Ghost and you're enjoying the product so far, we'd hugely appreciate your support in any way you care to show it.\"]]],[1,\"p\",[[0,[],0,\"Ghost is a non-profit organization, and we give away all our intellectual property as open source software. If you believe in what we do, there are a number of ways you can give us a hand, and we hugely appreciate all of them:\"]]],[3,\"ul\",[[[0,[],0,\"Contribute code via \"],[0,[0],1,\"GitHub\"]],[[0,[],0,\"Contribute financially via \"],[0,[1],1,\"GitHub Sponsors\"]],[[0,[],0,\"Contribute financially via \"],[0,[2],1,\"Open Collective\"]],[[0,[],0,\"Contribute reviews via \"],[0,[3],1,\"writing a blog post\"]],[[0,[],0,\"Contribute good vibes via \"],[0,[3],1,\"telling your friends\"],[0,[],0,\" about us\"]]]],[1,\"p\",[[0,[],0,\"Thanks for checking us out!\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Oh hey, you clicked every link of our starter content and even clicked this small link in the footer! If you like Ghost and you're enjoying the product so far, we'd hugely appreciate your support in any way you care to show it.</p><p>Ghost is a non-profit organization, and we give away all our intellectual property as open source software. If you believe in what we do, there are a number of ways you can give us a hand, and we hugely appreciate all of them:</p><ul><li>Contribute code via <a href=\"https://github.com/tryghost\">GitHub</a></li><li>Contribute financially via <a href=\"https://github.com/sponsors/TryGhost\">GitHub Sponsors</a></li><li>Contribute financially via <a href=\"https://opencollective.com/ghost\">Open Collective</a></li><li>Contribute reviews via <strong>writing a blog post</strong></li><li>Contribute good vibes via <strong>telling your friends</strong> about us</li></ul><p>Thanks for checking us out!</p>","comment_id":"616073bb67f6c500012753cb","plaintext":"Oh hey, you clicked every link of our starter content and even clicked this\nsmall link in the footer! If you like Ghost and you're enjoying the product so\nfar, we'd hugely appreciate your support in any way you care to show it.\n\nGhost is a non-profit organization, and we give away all our intellectual\nproperty as open source software. If you believe in what we do, there are a\nnumber of ways you can give us a hand, and we hugely appreciate all of them:\n\n * Contribute code via GitHub [https://github.com/tryghost]\n * Contribute financially via GitHub Sponsors\n   [https://github.com/sponsors/TryGhost]\n * Contribute financially via Open Collective [https://opencollective.com/ghost]\n * Contribute reviews via writing a blog post\n * Contribute good vibes via telling your friends about us\n\nThanks for checking us out!","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-10-08 16:37:15","created_by":"1","updated_at":"2021-10-08 16:37:15","updated_by":"1","published_at":"2021-10-08 16:37:25","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"6160769067f6c50001275527","uuid":"795bf84f-3b1a-436a-9dc3-d8a523b886f4","title":"关于日志的那些事儿","slug":"guan-yu-ri-zhi-de-na-xie-shi-er","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"> 这篇短文整理了关于日志的一些内容，耗叔要求的【目标是一篇“引经据典“的，“全面系统“的对日志的介绍】。结合一些参考链接和以往的经验，主要对软件开发过程中日志相关的知识进行梳理和学习。\\n\\n## 日志的定义\\n\\n先说说咱们日常生活中的日志，就是日记的另一种说法。\\n\\n> [日记](https://zh.wikipedia.org/wiki/%E6%97%A5%E8%AE%B0)是以日期为排列顺序的笔记。人们用日记来记录天气、事件一直到个人的心理感受、思想深处。日记可以是记录将要做的事情的，也可以记录已经发生的事情和心情。\\n\\n在计算机领域，日志文件的定义如下：\\n\\n> [日志文件](https://zh.wikipedia.org/zh-hans/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6)(logfile)是一个记录了发生在运行中的操作系统或其他软件中的事件的文件，或者记录了在网络聊天软件的用户之间发送的消息。日志记录(Logging)是指保存日志的行为。\\n\\n\\n## 日志的意义\\n\\n记录日志是软件开发中很重要的一部分。编写良好的日志代码能为软件提供快速的诊断信息和良好的存储结构。我们可以通过对记录的日志进行分析来支撑一些其他的功能，例如解析mysql的binary log来同步数据，通过日志分析用户行为，系统某功能的访问频率，通过日志排查程序的BUG等等。\\n\\n- 开发人员调试程序\\n  - 开发阶段的debug日志，通过输出重要参数来调试跟踪程序的正确性\\n- 记录用户行为\\n  - 记录用户的操作，访问，一般用于数据分析，操作留痕 \\n- 记录程序的运行情况\\n  - 记录程序的运行情况，尤其是异常情况，是排查问题的重要线索\\n- 记录系统的状态\\n  - 记录网络请求、IO等，便于监控和排查问题\\n\\n## 日志的类型\\n\\n- 行为日志\\n  - 分析用户的行为日志内容来实现数据分析等功能 \\n- 访问日志\\n  - 访问来源、功能的访问频率 \\n- 错误日志\\n  - 记录程序运行错误的现场，解决问题的重要线索\\n- 数据库日志\\n  - 记录SQL记录，可以分析慢SQL，生成报告 \\n- ...\\n\\n## 日志的格式\\n\\n每条日志都要记录发生的时间、级别、日志内容、错误码、以及对应代码的位置，存储在文本文件或者数据库中。\\n\\t\\n\\n- JSON\\n\\n  ```\\n  {\\n  \\t\\t\\\"@timestamp\\\": \\\"2017-07025 17:02:12\\\",\\n  \\t\\t\\\"level\\\": \\\"error\\\",\\n  \\t\\t\\\"message\\\": \\\"connection refused\\\",\\n  \\t\\t\\\"service\\\": \\\"listener\\\",\\n  \\t\\t\\\"thread\\\": \\\"125\\\",\\n  \\t\\t\\\"customerid\\\": \\\"776622\\\",\\n  \\t\\t\\\"ip\\\": \\\"34.124.233.12\\\",\\n  \\t\\t\\\"queryid\\\": \\\"45\\\"\\n  \\t}\\n  ```\\n\\n- 键值对\\n\\n  ```\\n  \\t2017-07025 17:02:12 level=error message=\\\"connection refused\\\"\\n  service=\\\"listener\\\" thread=125 customerid=776622 ip=34.124.233.12\\n  queryid=45\\n  ```\\n\\n## 日志的级别\\n\\n不同的日志框架对日志的分类略有差异，通常来说，日志可以被分为以下六个级别，通过配置来输出对应级别的日志\\n\\n- FATAL\\n  - 导致程序提前结束的严重错误。\\n- ERROR\\n  - 运行时异常以及预期之外的错误。\\n- WARN\\n  - 预期之外的运行时状况，不一定是错误的情况。\\n- INFO\\n  - 运行时产生的事件。\\n- DEBUG\\n  - 与程序运行时的流程相关的详细信息。\\n- TRACE\\n  - 更加具体的详细信息。\\n\\n## 日志归档\\n\\n根据天数或者文件大小产生新的文件，对日志进行滚动归档，压缩保存。\\n\\n\\n## 日志的性能\\n\\n记录日志是软件开发必不可少的环节，必须考虑日志的性能带来的问题，举两个例子：\\n\\n- 使用占位符而不是字符串连接\\n\\n```\\nlogger.debug(\\\"Entry number: \\\" + i + \\\" is \\\" +  String.valueOf(entry[i])); \\nlogger.debug(\\\"Entry number: {} is {}\\\", i, entry[i]);\\n```\\n\\n上面两个语句输出的效果是一样的，但是性能却相差两个数量级，在关闭DEBUG日志时，它们的开销就不一样了，主要的影响在于字符串转换和字符串拼接上，无论是否生效，前者都会将变量转换为字符串并进行拼接，而后者则只会在需要时执行这些操作。\\n\\n- 避免无用的日志\\n  - 无用的日志占用磁盘空间，增加系统IO，影响系统性能 \\n\\n## 日志框架\\n\\n列举一些 Java 程序里常用的日志框架\\n\\n- Java Util Logger\\n  - Jdk 自带的 Logger， 从1.4版本开始就有了，使用起来非常方便，一般用于测试，不支持占位符\\n- Log4j\\n  - Log4j 应该是最常用的日志框架了，其高度可配置，在运行期使用外部的配置文件对其进行配置。它按照优先级别记录日志，并可将日志信息定向输出到各种介质，比如数据库、文件、控制台、Unix Syslog等。\\n  - loggers：负责采集日志信息。\\n  - appenders：负责将日志信息发布到不同地方。\\n  - layouts：负责以各种风格格式化日志信息。 \\t\\n- Slf4j\\n  - Slf4j是The Simple Logging Facade for Java的简称，是一个简单日志门面抽象框架，它本身只提供了日志Facade API和一个简单的日志类实现，一般常配合Log4j，LogBack，java.util.logging使用。Slf4j作为应用层的Log接入时，程序可以根据实际应用场景动态调整底层的日志实现框架(Log4j/LogBack/JdkLog…)。\\n\\n- Logback\\n  - LogBack是Log4j的改良版本，比Log4j拥有更多的特性，同时也带来很大性能提升。LogBack官方建议配合Slf4j使用，这样可以灵活地替换底层日志框架。 \\n  - LogBack被分为3个组件，logback-core, logback-classic 和 logback-access。\\n  - logback-core提供了LogBack的核心功能，是另外两个组件的基础。\\n  - logback-classic则实现了Slf4j的API，所以当想配合Slf4j使用时，需要将logback-classic加入classpath。\\n  - logback-access是为了集成Servlet环境而准备的，可提供HTTP-access的日志接口。\\n- ...\\n\\n## 最佳实践\\n\\n- 定义记录日志的目标\\n  - 记录日志的意义何在，用于数据分析，还是同步数据，或者其他 \\n- 记录什么内容\\n  - 记录有用的日志内容，考虑提高日志可读性，提高系统性能 \\n- 使用日志框架\\n  - 日志框架更专业，功能全面，标准化，易配置\\n- 标准化日志格式\\n  - 统一日志格式 \\n- 提供上下文\\n  - 尽可能的提供完整信息，提高可读性，如果记录不完整，对于数据分析、排查错误起不到作用，记日志的意义就不大了 \\n- 使用日志标识，异常码\\n  - 使用异常码，例如`30001`代表用户模块，`30002`代表XX模块，这样在看到日志的时候就可以清楚快速的定位到对应的功能。 \\n\\n## 参考文献\\n\\n- [日志文件wiki](https://zh.wikipedia.org/wiki/日志文件)\\n- [30 best practices for logging at scale](https://www.loggly.com/blog/30-best-practices-logging-scale/)\\n- [How to Log a Log: Application Logging Best Practices](https://logz.io/blog/logging-best-practices/)\\n- [Java Best Practices for Smarter Application Logging & Exception Handling](https://stackify.com/java-logging-best-practices/)\\n- [10 Best Practices for Log Management and Analytics](https://dzone.com/articles/10-best-practices-for-log-management-and-analytics-1)\\n- [程序那些事：日志记录的作用和方法](https://www.infoq.cn/article/why-and-how-log)\\n- [日志的五个级别](https://www.infoq.cn/article/five-levels-of-logging)\\n- [你的Java日志，有没有用这些改进办法？](https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&mid=207451012&idx=1&sn=de9fba4eda0f221363b6d5ae54243416&scene=27#wechat_redirect)\\n- [Java 日志管理最佳实践](https://www.ibm.com/developerworks/cn/java/j-lo-practicelog/index.html)\\n- [日志最佳实践](http://blog.jobbole.com/56574/)\\n- [Ultimate log4j Tutorial for Java Logging – Best Practices, Resources and Tips](https://stackify.com/log4j-guide-dotnet-logging/)\\n\\n\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>这篇短文整理了关于日志的一些内容，耗叔要求的【目标是一篇“引经据典“的，“全面系统“的对日志的介绍】。结合一些参考链接和以往的经验，主要对软件开发过程中日志相关的知识进行梳理和学习。</p>\n</blockquote>\n<h2 id=\"%E6%97%A5%E5%BF%97%E7%9A%84%E5%AE%9A%E4%B9%89\">日志的定义</h2>\n<p>先说说咱们日常生活中的日志，就是日记的另一种说法。</p>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%97%A5%E8%AE%B0\">日记</a>是以日期为排列顺序的笔记。人们用日记来记录天气、事件一直到个人的心理感受、思想深处。日记可以是记录将要做的事情的，也可以记录已经发生的事情和心情。</p>\n</blockquote>\n<p>在计算机领域，日志文件的定义如下：</p>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/zh-hans/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6\">日志文件</a>(logfile)是一个记录了发生在运行中的操作系统或其他软件中的事件的文件，或者记录了在网络聊天软件的用户之间发送的消息。日志记录(Logging)是指保存日志的行为。</p>\n</blockquote>\n<h2 id=\"%E6%97%A5%E5%BF%97%E7%9A%84%E6%84%8F%E4%B9%89\">日志的意义</h2>\n<p>记录日志是软件开发中很重要的一部分。编写良好的日志代码能为软件提供快速的诊断信息和良好的存储结构。我们可以通过对记录的日志进行分析来支撑一些其他的功能，例如解析mysql的binary log来同步数据，通过日志分析用户行为，系统某功能的访问频率，通过日志排查程序的BUG等等。</p>\n<ul>\n<li>开发人员调试程序\n<ul>\n<li>开发阶段的debug日志，通过输出重要参数来调试跟踪程序的正确性</li>\n</ul>\n</li>\n<li>记录用户行为\n<ul>\n<li>记录用户的操作，访问，一般用于数据分析，操作留痕</li>\n</ul>\n</li>\n<li>记录程序的运行情况\n<ul>\n<li>记录程序的运行情况，尤其是异常情况，是排查问题的重要线索</li>\n</ul>\n</li>\n<li>记录系统的状态\n<ul>\n<li>记录网络请求、IO等，便于监控和排查问题</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E6%97%A5%E5%BF%97%E7%9A%84%E7%B1%BB%E5%9E%8B\">日志的类型</h2>\n<ul>\n<li>行为日志\n<ul>\n<li>分析用户的行为日志内容来实现数据分析等功能</li>\n</ul>\n</li>\n<li>访问日志\n<ul>\n<li>访问来源、功能的访问频率</li>\n</ul>\n</li>\n<li>错误日志\n<ul>\n<li>记录程序运行错误的现场，解决问题的重要线索</li>\n</ul>\n</li>\n<li>数据库日志\n<ul>\n<li>记录SQL记录，可以分析慢SQL，生成报告</li>\n</ul>\n</li>\n<li>...</li>\n</ul>\n<h2 id=\"%E6%97%A5%E5%BF%97%E7%9A%84%E6%A0%BC%E5%BC%8F\">日志的格式</h2>\n<p>每条日志都要记录发生的时间、级别、日志内容、错误码、以及对应代码的位置，存储在文本文件或者数据库中。</p>\n<ul>\n<li>\n<p>JSON</p>\n<pre><code>{\n\t\t&quot;@timestamp&quot;: &quot;2017-07025 17:02:12&quot;,\n\t\t&quot;level&quot;: &quot;error&quot;,\n\t\t&quot;message&quot;: &quot;connection refused&quot;,\n\t\t&quot;service&quot;: &quot;listener&quot;,\n\t\t&quot;thread&quot;: &quot;125&quot;,\n\t\t&quot;customerid&quot;: &quot;776622&quot;,\n\t\t&quot;ip&quot;: &quot;34.124.233.12&quot;,\n\t\t&quot;queryid&quot;: &quot;45&quot;\n\t}\n</code></pre>\n</li>\n<li>\n<p>键值对</p>\n<pre><code>\t2017-07025 17:02:12 level=error message=&quot;connection refused&quot;\nservice=&quot;listener&quot; thread=125 customerid=776622 ip=34.124.233.12\nqueryid=45\n</code></pre>\n</li>\n</ul>\n<h2 id=\"%E6%97%A5%E5%BF%97%E7%9A%84%E7%BA%A7%E5%88%AB\">日志的级别</h2>\n<p>不同的日志框架对日志的分类略有差异，通常来说，日志可以被分为以下六个级别，通过配置来输出对应级别的日志</p>\n<ul>\n<li>FATAL\n<ul>\n<li>导致程序提前结束的严重错误。</li>\n</ul>\n</li>\n<li>ERROR\n<ul>\n<li>运行时异常以及预期之外的错误。</li>\n</ul>\n</li>\n<li>WARN\n<ul>\n<li>预期之外的运行时状况，不一定是错误的情况。</li>\n</ul>\n</li>\n<li>INFO\n<ul>\n<li>运行时产生的事件。</li>\n</ul>\n</li>\n<li>DEBUG\n<ul>\n<li>与程序运行时的流程相关的详细信息。</li>\n</ul>\n</li>\n<li>TRACE\n<ul>\n<li>更加具体的详细信息。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E6%97%A5%E5%BF%97%E5%BD%92%E6%A1%A3\">日志归档</h2>\n<p>根据天数或者文件大小产生新的文件，对日志进行滚动归档，压缩保存。</p>\n<h2 id=\"%E6%97%A5%E5%BF%97%E7%9A%84%E6%80%A7%E8%83%BD\">日志的性能</h2>\n<p>记录日志是软件开发必不可少的环节，必须考虑日志的性能带来的问题，举两个例子：</p>\n<ul>\n<li>使用占位符而不是字符串连接</li>\n</ul>\n<pre><code>logger.debug(&quot;Entry number: &quot; + i + &quot; is &quot; +  String.valueOf(entry[i])); \nlogger.debug(&quot;Entry number: {} is {}&quot;, i, entry[i]);\n</code></pre>\n<p>上面两个语句输出的效果是一样的，但是性能却相差两个数量级，在关闭DEBUG日志时，它们的开销就不一样了，主要的影响在于字符串转换和字符串拼接上，无论是否生效，前者都会将变量转换为字符串并进行拼接，而后者则只会在需要时执行这些操作。</p>\n<ul>\n<li>避免无用的日志\n<ul>\n<li>无用的日志占用磁盘空间，增加系统IO，影响系统性能</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6\">日志框架</h2>\n<p>列举一些 Java 程序里常用的日志框架</p>\n<ul>\n<li>\n<p>Java Util Logger</p>\n<ul>\n<li>Jdk 自带的 Logger， 从1.4版本开始就有了，使用起来非常方便，一般用于测试，不支持占位符</li>\n</ul>\n</li>\n<li>\n<p>Log4j</p>\n<ul>\n<li>Log4j 应该是最常用的日志框架了，其高度可配置，在运行期使用外部的配置文件对其进行配置。它按照优先级别记录日志，并可将日志信息定向输出到各种介质，比如数据库、文件、控制台、Unix Syslog等。</li>\n<li>loggers：负责采集日志信息。</li>\n<li>appenders：负责将日志信息发布到不同地方。</li>\n<li>layouts：负责以各种风格格式化日志信息。</li>\n</ul>\n</li>\n<li>\n<p>Slf4j</p>\n<ul>\n<li>Slf4j是The Simple Logging Facade for Java的简称，是一个简单日志门面抽象框架，它本身只提供了日志Facade API和一个简单的日志类实现，一般常配合Log4j，LogBack，java.util.logging使用。Slf4j作为应用层的Log接入时，程序可以根据实际应用场景动态调整底层的日志实现框架(Log4j/LogBack/JdkLog…)。</li>\n</ul>\n</li>\n<li>\n<p>Logback</p>\n<ul>\n<li>LogBack是Log4j的改良版本，比Log4j拥有更多的特性，同时也带来很大性能提升。LogBack官方建议配合Slf4j使用，这样可以灵活地替换底层日志框架。</li>\n<li>LogBack被分为3个组件，logback-core, logback-classic 和 logback-access。</li>\n<li>logback-core提供了LogBack的核心功能，是另外两个组件的基础。</li>\n<li>logback-classic则实现了Slf4j的API，所以当想配合Slf4j使用时，需要将logback-classic加入classpath。</li>\n<li>logback-access是为了集成Servlet环境而准备的，可提供HTTP-access的日志接口。</li>\n</ul>\n</li>\n<li>\n<p>...</p>\n</li>\n</ul>\n<h2 id=\"%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\">最佳实践</h2>\n<ul>\n<li>定义记录日志的目标\n<ul>\n<li>记录日志的意义何在，用于数据分析，还是同步数据，或者其他</li>\n</ul>\n</li>\n<li>记录什么内容\n<ul>\n<li>记录有用的日志内容，考虑提高日志可读性，提高系统性能</li>\n</ul>\n</li>\n<li>使用日志框架\n<ul>\n<li>日志框架更专业，功能全面，标准化，易配置</li>\n</ul>\n</li>\n<li>标准化日志格式\n<ul>\n<li>统一日志格式</li>\n</ul>\n</li>\n<li>提供上下文\n<ul>\n<li>尽可能的提供完整信息，提高可读性，如果记录不完整，对于数据分析、排查错误起不到作用，记日志的意义就不大了</li>\n</ul>\n</li>\n<li>使用日志标识，异常码\n<ul>\n<li>使用异常码，例如<code>30001</code>代表用户模块，<code>30002</code>代表XX模块，这样在看到日志的时候就可以清楚快速的定位到对应的功能。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\">参考文献</h2>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6\">日志文件wiki</a></li>\n<li><a href=\"https://www.loggly.com/blog/30-best-practices-logging-scale/\">30 best practices for logging at scale</a></li>\n<li><a href=\"https://logz.io/blog/logging-best-practices/\">How to Log a Log: Application Logging Best Practices</a></li>\n<li><a href=\"https://stackify.com/java-logging-best-practices/\">Java Best Practices for Smarter Application Logging &amp; Exception Handling</a></li>\n<li><a href=\"https://dzone.com/articles/10-best-practices-for-log-management-and-analytics-1\">10 Best Practices for Log Management and Analytics</a></li>\n<li><a href=\"https://www.infoq.cn/article/why-and-how-log\">程序那些事：日志记录的作用和方法</a></li>\n<li><a href=\"https://www.infoq.cn/article/five-levels-of-logging\">日志的五个级别</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=207451012&amp;idx=1&amp;sn=de9fba4eda0f221363b6d5ae54243416&amp;scene=27#wechat_redirect\">你的Java日志，有没有用这些改进办法？</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-practicelog/index.html\">Java 日志管理最佳实践</a></li>\n<li><a href=\"http://blog.jobbole.com/56574/\">日志最佳实践</a></li>\n<li><a href=\"https://stackify.com/log4j-guide-dotnet-logging/\">Ultimate log4j Tutorial for Java Logging – Best Practices, Resources and Tips</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"6160769067f6c50001275527","plaintext":"> 这篇短文整理了关于日志的一些内容，耗叔要求的【目标是一篇“引经据典“的，“全面系统“的对日志的介绍】。结合一些参考链接和以往的经验，主要对软件开发过程中日志相关的知识进行梳理和学习。\n\n\n日志的定义\n先说说咱们日常生活中的日志，就是日记的另一种说法。\n\n> 日记 [https://zh.wikipedia.org/wiki/%E6%97%A5%E8%AE%B0]\n是以日期为排列顺序的笔记。人们用日记来记录天气、事件一直到个人的心理感受、思想深处。日记可以是记录将要做的事情的，也可以记录已经发生的事情和心情。\n\n\n在计算机领域，日志文件的定义如下：\n\n> 日志文件 [https://zh.wikipedia.org/zh-hans/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6]\n(logfile)是一个记录了发生在运行中的操作系统或其他软件中的事件的文件，或者记录了在网络聊天软件的用户之间发送的消息。日志记录(Logging)是指保存日志的行为。\n\n\n日志的意义\n记录日志是软件开发中很重要的一部分。编写良好的日志代码能为软件提供快速的诊断信息和良好的存储结构。我们可以通过对记录的日志进行分析来支撑一些其他的功能，例如解析mysql的binary\nlog来同步数据，通过日志分析用户行为，系统某功能的访问频率，通过日志排查程序的BUG等等。\n\n * 开发人员调试程序 * 开发阶段的debug日志，通过输出重要参数来调试跟踪程序的正确性\n   \n   \n * 记录用户行为 * 记录用户的操作，访问，一般用于数据分析，操作留痕\n   \n   \n * 记录程序的运行情况 * 记录程序的运行情况，尤其是异常情况，是排查问题的重要线索\n   \n   \n * 记录系统的状态 * 记录网络请求、IO等，便于监控和排查问题\n   \n   \n\n日志的类型\n * 行为日志 * 分析用户的行为日志内容来实现数据分析等功能\n   \n   \n * 访问日志 * 访问来源、功能的访问频率\n   \n   \n * 错误日志 * 记录程序运行错误的现场，解决问题的重要线索\n   \n   \n * 数据库日志 * 记录SQL记录，可以分析慢SQL，生成报告\n   \n   \n * ...\n\n日志的格式\n每条日志都要记录发生的时间、级别、日志内容、错误码、以及对应代码的位置，存储在文本文件或者数据库中。\n\n * JSON\n   \n   {\n   \t\t\"@timestamp\": \"2017-07025 17:02:12\",\n   \t\t\"level\": \"error\",\n   \t\t\"message\": \"connection refused\",\n   \t\t\"service\": \"listener\",\n   \t\t\"thread\": \"125\",\n   \t\t\"customerid\": \"776622\",\n   \t\t\"ip\": \"34.124.233.12\",\n   \t\t\"queryid\": \"45\"\n   \t}\n   \n   \n   \n * 键值对\n   \n   \t2017-07025 17:02:12 level=error message=\"connection refused\"\n   service=\"listener\" thread=125 customerid=776622 ip=34.124.233.12\n   queryid=45\n   \n   \n   \n\n日志的级别\n不同的日志框架对日志的分类略有差异，通常来说，日志可以被分为以下六个级别，通过配置来输出对应级别的日志\n\n * FATAL * 导致程序提前结束的严重错误。\n   \n   \n * ERROR * 运行时异常以及预期之外的错误。\n   \n   \n * WARN * 预期之外的运行时状况，不一定是错误的情况。\n   \n   \n * INFO * 运行时产生的事件。\n   \n   \n * DEBUG * 与程序运行时的流程相关的详细信息。\n   \n   \n * TRACE * 更加具体的详细信息。\n   \n   \n\n日志归档\n根据天数或者文件大小产生新的文件，对日志进行滚动归档，压缩保存。\n\n日志的性能\n记录日志是软件开发必不可少的环节，必须考虑日志的性能带来的问题，举两个例子：\n\n * 使用占位符而不是字符串连接\n\nlogger.debug(\"Entry number: \" + i + \" is \" +  String.valueOf(entry[i])); \nlogger.debug(\"Entry number: {} is {}\", i, entry[i]);\n\n\n上面两个语句输出的效果是一样的，但是性能却相差两个数量级，在关闭DEBUG日志时，它们的开销就不一样了，主要的影响在于字符串转换和字符串拼接上，无论是否生效，前者都会将变量转换为字符串并进行拼接，而后者则只会在需要时执行这些操作。\n\n * 避免无用的日志 * 无用的日志占用磁盘空间，增加系统IO，影响系统性能\n   \n   \n\n日志框架\n列举一些 Java 程序里常用的日志框架\n\n * Java Util Logger\n   \n    * Jdk 自带的 Logger， 从1.4版本开始就有了，使用起来非常方便，一般用于测试，不支持占位符\n   \n   \n * Log4j\n   \n    * Log4j\n      应该是最常用的日志框架了，其高度可配置，在运行期使用外部的配置文件对其进行配置。它按照优先级别记录日志，并可将日志信息定向输出到各种介质，比如数据库、文件、控制台、Unix\n      Syslog等。\n    * loggers：负责采集日志信息。\n    * appenders：负责将日志信息发布到不同地方。\n    * layouts：负责以各种风格格式化日志信息。\n   \n   \n * Slf4j\n   \n    * Slf4j是The Simple Logging Facade for Java的简称，是一个简单日志门面抽象框架，它本身只提供了日志Facade\n      API和一个简单的日志类实现，一般常配合Log4j，LogBack，java.util.logging使用。Slf4j作为应用层的Log接入时，程序可以根据实际应用场景动态调整底层的日志实现框架(Log4j/LogBack/JdkLog…)。\n   \n   \n * Logback\n   \n    * LogBack是Log4j的改良版本，比Log4j拥有更多的特性，同时也带来很大性能提升。LogBack官方建议配合Slf4j使用，这样可以灵活地替换底层日志框架。\n    * LogBack被分为3个组件，logback-core, logback-classic 和 logback-access。\n    * logback-core提供了LogBack的核心功能，是另外两个组件的基础。\n    * logback-classic则实现了Slf4j的API，所以当想配合Slf4j使用时，需要将logback-classic加入classpath。\n    * logback-access是为了集成Servlet环境而准备的，可提供HTTP-access的日志接口。\n   \n   \n * ...\n   \n   \n\n最佳实践\n * 定义记录日志的目标 * 记录日志的意义何在，用于数据分析，还是同步数据，或者其他\n   \n   \n * 记录什么内容 * 记录有用的日志内容，考虑提高日志可读性，提高系统性能\n   \n   \n * 使用日志框架 * 日志框架更专业，功能全面，标准化，易配置\n   \n   \n * 标准化日志格式 * 统一日志格式\n   \n   \n * 提供上下文 * 尽可能的提供完整信息，提高可读性，如果记录不完整，对于数据分析、排查错误起不到作用，记日志的意义就不大了\n   \n   \n * 使用日志标识，异常码 * 使用异常码，例如30001代表用户模块，30002代表XX模块，这样在看到日志的时候就可以清楚快速的定位到对应的功能。\n   \n   \n\n参考文献\n * 日志文件wiki [https://zh.wikipedia.org/wiki/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6]\n * 30 best practices for logging at scale\n   [https://www.loggly.com/blog/30-best-practices-logging-scale/]\n * How to Log a Log: Application Logging Best Practices\n   [https://logz.io/blog/logging-best-practices/]\n * Java Best Practices for Smarter Application Logging & Exception Handling\n   [https://stackify.com/java-logging-best-practices/]\n * 10 Best Practices for Log Management and Analytics\n   [https://dzone.com/articles/10-best-practices-for-log-management-and-analytics-1]\n * 程序那些事：日志记录的作用和方法 [https://www.infoq.cn/article/why-and-how-log]\n * 日志的五个级别 [https://www.infoq.cn/article/five-levels-of-logging]\n * 你的Java日志，有没有用这些改进办法？\n   [https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&mid=207451012&idx=1&sn=de9fba4eda0f221363b6d5ae54243416&scene=27#wechat_redirect]\n * Java 日志管理最佳实践\n   [https://www.ibm.com/developerworks/cn/java/j-lo-practicelog/index.html]\n * 日志最佳实践 [http://blog.jobbole.com/56574/]\n * Ultimate log4j Tutorial for Java Logging – Best Practices, Resources and Tips\n   [https://stackify.com/log4j-guide-dotnet-logging/]","feature_image":"__GHOST_URL__/content/images/2021/10/v2-0baa2161ee18982a3184ce4e9dea019c_r.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-10-08 16:49:20","created_by":"1","updated_at":"2021-10-08 16:59:59","updated_by":"1","published_at":"2018-11-12 16:50:00","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"61607b040af28a00012bf0de","uuid":"d64adfc1-5244-443d-8532-0ae771abfce9","title":"常用的图算法","slug":"chang-yong-de-tu-suan-fa","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"> 最近做了一些涉及到图的算法题，特此归纳总结一下图的基础、广度优先搜索、深度优先搜索、迪克斯特拉算法以及贝尔曼福德算法。\\n\\n## 什么是图\\n\\n![basic-graph](./basic-graph.png)\\n\\n[图](https://zh.wikipedia.org/wiki/图_(数学))是由节点（node）和边（edge）组成的一种数据结构。上图中，A 和 B 是该图的节点，连接线是图的一条边。\\n\\n图模拟了一组连接，一个节点可能与很多节点直接相连，这些节点称为**邻居节点**，需要注意的是，在上面的图中，A指向B，说明B是A的邻居节点，但B没有指向A，说明A不是B的邻居节点。\\n\\n## 图的分类\\n\\n### 有向图\\n\\n如果给图的每条边都规定一个方向，那么该图就称为有向图，有向图所有的连接关系都是单向的。\\n\\n![directed-graph](./directed-graph.png)\\n\\n### 无向图\\n\\n边没有方向的图称为无向图，无向图其实意味着图的**两个节点彼此指向对方**，其实就是环。\\n\\n![undirected-graph](./undirected-graph.png)\\n\\n### 加权图\\n\\n图的每条边都有关联的数字，这些数字称为**权重**，带权重的图称为**加权图**。\\n\\n![directed-wieghted-graph](./directed-weighted-graph.png)\\n\\n### 非加权图\\n\\n不带权重的图称为非加权图。\\n\\n## 广度优先搜索(Breadth-First-Search)\\n\\n> **广度优先搜索算法**（英语：Breadth-First-Search，缩写为BFS），又译作**宽度优先搜索**，或**横向优先搜索**，是一种[图形搜索算法](https://zh.wikipedia.org/w/index.php?title=圖形搜索演算法&action=edit&redlink=1)。简单的说，BFS是从[根节点](https://zh.wikipedia.org/w/index.php?title=根節點&action=edit&redlink=1)开始，沿着树的宽度遍历树的[节点](https://zh.wikipedia.org/wiki/节点)。如果所有节点均被访问，则算法中止。广度优先搜索的实现一般采用open-closed表\\n\\n[广度优先搜索](https://zh.wikipedia.org/wiki/广度优先搜索)解决两类问题：\\n\\n1. 从节点A出发，有没有前往节点B的路径\\n2. 从节点A出发，前往节点B的那条路径最短，或者说哪条路径的段数最少？\\n\\n广度优先搜索中，起点的邻居称为一度关系，其邻居的邻居称为二度关系，搜索顺序是先一度关系，再二度关系，以此类推。在代码实现时，需要使用**双端队列**来保证搜索顺序。\\n\\n广度优先搜索的步骤：\\n\\n1. 创建一个队列，将起点的所有邻居节点压入到队列中；\\n2. 从队列弹出一个节点，检查这个节点是否终点，如果是，则完成搜索；\\n3. 如果该节点不是终点，则将该节点的所有邻居节点压入上述队列中；\\n4. 回到第2步，继续检查；\\n5. 如果队列为空，说明终点不可达，找不到该路径。\\n\\n## 狄克斯特拉算法(Dijkstra)\\n\\n> **戴克斯特拉算法**（英语：Dijkstra's algorithm，又译**迪杰斯特拉算法**）由荷兰计算机科学家[艾兹赫尔·戴克斯特拉](https://zh.wikipedia.org/wiki/艾兹赫尔·戴克斯特拉)在1956年提出。戴克斯特拉算法使用了[广度优先搜索](https://zh.wikipedia.org/wiki/广度优先搜索)解决赋权有向图的单源[最短路径问题](https://zh.wikipedia.org/wiki/最短路径问题)。该算法存在很多变体；戴克斯特拉的原始版本找到两个顶点之间的最短路径，但是更常见的变体固定了一个顶点作为源节点然后找到该顶点到图中所有其它节点的最短路径，产生一个[最短路径树](https://zh.wikipedia.org/wiki/最短路径树)。该算法常用于[路由](https://zh.wikipedia.org/wiki/路由)算法或者作为其他图算法的一个子模块。举例来说，如果图中的顶点表示城市，而边上的权重表示城市间开车行经的距离，该算法可以用来找到两个城市之间的最短路径。\\n\\n广度优先搜索可以找到段数最少的路径，但是无法找到**开销**最小的路径，[狄克斯特拉算法](https://zh.wikipedia.org/wiki/戴克斯特拉算法)就是用来解决这类问题的。什么是**开销**，可以理解为总权重，假设从起点出发到节点B需要2小时，那么可以称起点到节点B的**开销**为2。当然，开销也可以是其他的计量单位，例如从起点出发到节点B距离3公里，可以计作起点到节点B的**开销**为3。\\n\\n狄克斯特拉算法的步骤：\\n\\n1. 找出开销最小的节点，即可以在最短的时间内到达的节点；\\n2. 更新该节点的邻居的开销；\\n3. 重复这个过程，直到图中所有的节点都处理完；\\n4. 计算开销最小的路径。\\n\\n注：狄克斯特拉算法仅适用于**有向无环图**\\n\\n## 深度优先搜索(Depth-First-Search)\\n\\n> **深度优先搜索算法**（英语：Depth-First-Search，DFS）是一种用于遍历或搜索[树](https://zh.wikipedia.org/wiki/树_(数据结构))或[图](https://zh.wikipedia.org/wiki/图_(数学))的[算法](https://zh.wikipedia.org/wiki/算法)。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。\\n\\n从图G的某个顶点v0出发，访问v0，然后选择一个与v0相邻且没被访问过的顶点vi访问，再从vi出发选择一个与vi相邻且未被访问的顶点vj进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点w，从w出发按同样的方法向前遍历，直到图中所有顶点都被访问。\\n\\n深度优先搜索的步骤：\\n\\n1. 首先将起点放入到队列中；\\n2. 从队列弹出一个节点，并检查它是否为终点，如果是，则完成搜索，返回结果；\\n3. 如果不是终点，则将它某一个没有检查过的邻居节点加入到队列中；\\n4. 回到第2步；\\n5. 如果不存在未检查过的邻居节点，则将其父节点加入队列中，回到第2步；\\n6. 重复第5步；\\n7. 如果队列为空，表示所有的节点都检查过了，完成搜索，返回找不到终点\\n\\n### 参考文献\\n\\n- 《算法图解》\\n- 《算法（第4版）》\\n- [维基百科-图](https://zh.wikipedia.org/wiki/图_(数学))\\n- [维基百科-广度优先搜索](https://zh.wikipedia.org/wiki/广度优先搜索)\\n- [维基百科-戴克斯特拉算法](https://zh.wikipedia.org/wiki/戴克斯特拉算法)\\n- [维基百科-深度优先搜索](https://zh.wikipedia.org/wiki/深度优先搜索)\\n- [wikipedia-Backtracking](https://en.wikipedia.org/wiki/Backtracking)\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>最近做了一些涉及到图的算法题，特此归纳总结一下图的基础、广度优先搜索、深度优先搜索、迪克斯特拉算法以及贝尔曼福德算法。</p>\n</blockquote>\n<h2 id=\"%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%BE\">什么是图</h2>\n<p><img src=\"./basic-graph.png\" alt=\"basic-graph\" loading=\"lazy\"></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE_(%E6%95%B0%E5%AD%A6)\">图</a>是由节点（node）和边（edge）组成的一种数据结构。上图中，A 和 B 是该图的节点，连接线是图的一条边。</p>\n<p>图模拟了一组连接，一个节点可能与很多节点直接相连，这些节点称为<strong>邻居节点</strong>，需要注意的是，在上面的图中，A指向B，说明B是A的邻居节点，但B没有指向A，说明A不是B的邻居节点。</p>\n<h2 id=\"%E5%9B%BE%E7%9A%84%E5%88%86%E7%B1%BB\">图的分类</h2>\n<h3 id=\"%E6%9C%89%E5%90%91%E5%9B%BE\">有向图</h3>\n<p>如果给图的每条边都规定一个方向，那么该图就称为有向图，有向图所有的连接关系都是单向的。</p>\n<p><img src=\"./directed-graph.png\" alt=\"directed-graph\" loading=\"lazy\"></p>\n<h3 id=\"%E6%97%A0%E5%90%91%E5%9B%BE\">无向图</h3>\n<p>边没有方向的图称为无向图，无向图其实意味着图的<strong>两个节点彼此指向对方</strong>，其实就是环。</p>\n<p><img src=\"./undirected-graph.png\" alt=\"undirected-graph\" loading=\"lazy\"></p>\n<h3 id=\"%E5%8A%A0%E6%9D%83%E5%9B%BE\">加权图</h3>\n<p>图的每条边都有关联的数字，这些数字称为<strong>权重</strong>，带权重的图称为<strong>加权图</strong>。</p>\n<p><img src=\"./directed-weighted-graph.png\" alt=\"directed-wieghted-graph\" loading=\"lazy\"></p>\n<h3 id=\"%E9%9D%9E%E5%8A%A0%E6%9D%83%E5%9B%BE\">非加权图</h3>\n<p>不带权重的图称为非加权图。</p>\n<h2 id=\"%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2breadth-first-search\">广度优先搜索(Breadth-First-Search)</h2>\n<blockquote>\n<p><strong>广度优先搜索算法</strong>（英语：Breadth-First-Search，缩写为BFS），又译作<strong>宽度优先搜索</strong>，或<strong>横向优先搜索</strong>，是一种<a href=\"https://zh.wikipedia.org/w/index.php?title=%E5%9C%96%E5%BD%A2%E6%90%9C%E7%B4%A2%E6%BC%94%E7%AE%97%E6%B3%95&amp;action=edit&amp;redlink=1\">图形搜索算法</a>。简单的说，BFS是从<a href=\"https://zh.wikipedia.org/w/index.php?title=%E6%A0%B9%E7%AF%80%E9%BB%9E&amp;action=edit&amp;redlink=1\">根节点</a>开始，沿着树的宽度遍历树的<a href=\"https://zh.wikipedia.org/wiki/%E8%8A%82%E7%82%B9\">节点</a>。如果所有节点均被访问，则算法中止。广度优先搜索的实现一般采用open-closed表</p>\n</blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">广度优先搜索</a>解决两类问题：</p>\n<ol>\n<li>从节点A出发，有没有前往节点B的路径</li>\n<li>从节点A出发，前往节点B的那条路径最短，或者说哪条路径的段数最少？</li>\n</ol>\n<p>广度优先搜索中，起点的邻居称为一度关系，其邻居的邻居称为二度关系，搜索顺序是先一度关系，再二度关系，以此类推。在代码实现时，需要使用<strong>双端队列</strong>来保证搜索顺序。</p>\n<p>广度优先搜索的步骤：</p>\n<ol>\n<li>创建一个队列，将起点的所有邻居节点压入到队列中；</li>\n<li>从队列弹出一个节点，检查这个节点是否终点，如果是，则完成搜索；</li>\n<li>如果该节点不是终点，则将该节点的所有邻居节点压入上述队列中；</li>\n<li>回到第2步，继续检查；</li>\n<li>如果队列为空，说明终点不可达，找不到该路径。</li>\n</ol>\n<h2 id=\"%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95dijkstra\">狄克斯特拉算法(Dijkstra)</h2>\n<blockquote>\n<p><strong>戴克斯特拉算法</strong>（英语：Dijkstra's algorithm，又译<strong>迪杰斯特拉算法</strong>）由荷兰计算机科学家<a href=\"https://zh.wikipedia.org/wiki/%E8%89%BE%E5%85%B9%E8%B5%AB%E5%B0%94%C2%B7%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89\">艾兹赫尔·戴克斯特拉</a>在1956年提出。戴克斯特拉算法使用了<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">广度优先搜索</a>解决赋权有向图的单源<a href=\"https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98\">最短路径问题</a>。该算法存在很多变体；戴克斯特拉的原始版本找到两个顶点之间的最短路径，但是更常见的变体固定了一个顶点作为源节点然后找到该顶点到图中所有其它节点的最短路径，产生一个<a href=\"https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E6%A0%91\">最短路径树</a>。该算法常用于<a href=\"https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1\">路由</a>算法或者作为其他图算法的一个子模块。举例来说，如果图中的顶点表示城市，而边上的权重表示城市间开车行经的距离，该算法可以用来找到两个城市之间的最短路径。</p>\n</blockquote>\n<p>广度优先搜索可以找到段数最少的路径，但是无法找到<strong>开销</strong>最小的路径，<a href=\"https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95\">狄克斯特拉算法</a>就是用来解决这类问题的。什么是<strong>开销</strong>，可以理解为总权重，假设从起点出发到节点B需要2小时，那么可以称起点到节点B的<strong>开销</strong>为2。当然，开销也可以是其他的计量单位，例如从起点出发到节点B距离3公里，可以计作起点到节点B的<strong>开销</strong>为3。</p>\n<p>狄克斯特拉算法的步骤：</p>\n<ol>\n<li>找出开销最小的节点，即可以在最短的时间内到达的节点；</li>\n<li>更新该节点的邻居的开销；</li>\n<li>重复这个过程，直到图中所有的节点都处理完；</li>\n<li>计算开销最小的路径。</li>\n</ol>\n<p>注：狄克斯特拉算法仅适用于<strong>有向无环图</strong></p>\n<h2 id=\"%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2depth-first-search\">深度优先搜索(Depth-First-Search)</h2>\n<blockquote>\n<p><strong>深度优先搜索算法</strong>（英语：Depth-First-Search，DFS）是一种用于遍历或搜索<a href=\"https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\">树</a>或<a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE_(%E6%95%B0%E5%AD%A6)\">图</a>的<a href=\"https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95\">算法</a>。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。</p>\n</blockquote>\n<p>从图G的某个顶点v0出发，访问v0，然后选择一个与v0相邻且没被访问过的顶点vi访问，再从vi出发选择一个与vi相邻且未被访问的顶点vj进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点w，从w出发按同样的方法向前遍历，直到图中所有顶点都被访问。</p>\n<p>深度优先搜索的步骤：</p>\n<ol>\n<li>首先将起点放入到队列中；</li>\n<li>从队列弹出一个节点，并检查它是否为终点，如果是，则完成搜索，返回结果；</li>\n<li>如果不是终点，则将它某一个没有检查过的邻居节点加入到队列中；</li>\n<li>回到第2步；</li>\n<li>如果不存在未检查过的邻居节点，则将其父节点加入队列中，回到第2步；</li>\n<li>重复第5步；</li>\n<li>如果队列为空，表示所有的节点都检查过了，完成搜索，返回找不到终点</li>\n</ol>\n<h3 id=\"%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\">参考文献</h3>\n<ul>\n<li>《算法图解》</li>\n<li>《算法（第4版）》</li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE_(%E6%95%B0%E5%AD%A6)\">维基百科-图</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">维基百科-广度优先搜索</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95\">维基百科-戴克斯特拉算法</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">维基百科-深度优先搜索</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Backtracking\">wikipedia-Backtracking</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"61607b040af28a00012bf0de","plaintext":"> 最近做了一些涉及到图的算法题，特此归纳总结一下图的基础、广度优先搜索、深度优先搜索、迪克斯特拉算法以及贝尔曼福德算法。\n\n\n什么是图\n\n\n图 [https://zh.wikipedia.org/wiki/%E5%9B%BE_(%E6%95%B0%E5%AD%A6)]\n是由节点（node）和边（edge）组成的一种数据结构。上图中，A 和 B 是该图的节点，连接线是图的一条边。\n\n图模拟了一组连接，一个节点可能与很多节点直接相连，这些节点称为邻居节点\n，需要注意的是，在上面的图中，A指向B，说明B是A的邻居节点，但B没有指向A，说明A不是B的邻居节点。\n\n图的分类\n有向图\n如果给图的每条边都规定一个方向，那么该图就称为有向图，有向图所有的连接关系都是单向的。\n\n\n\n无向图\n边没有方向的图称为无向图，无向图其实意味着图的两个节点彼此指向对方，其实就是环。\n\n\n\n加权图\n图的每条边都有关联的数字，这些数字称为权重，带权重的图称为加权图。\n\n\n\n非加权图\n不带权重的图称为非加权图。\n\n广度优先搜索(Breadth-First-Search)\n> 广度优先搜索算法（英语：Breadth-First-Search，缩写为BFS），又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法\n[https://zh.wikipedia.org/w/index.php?title=%E5%9C%96%E5%BD%A2%E6%90%9C%E7%B4%A2%E6%BC%94%E7%AE%97%E6%B3%95&action=edit&redlink=1]\n。简单的说，BFS是从根节点\n[https://zh.wikipedia.org/w/index.php?title=%E6%A0%B9%E7%AF%80%E9%BB%9E&action=edit&redlink=1]\n开始，沿着树的宽度遍历树的节点 [https://zh.wikipedia.org/wiki/%E8%8A%82%E7%82%B9]\n。如果所有节点均被访问，则算法中止。广度优先搜索的实现一般采用open-closed表\n\n\n广度优先搜索\n[https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2]\n解决两类问题：\n\n 1. 从节点A出发，有没有前往节点B的路径\n 2. 从节点A出发，前往节点B的那条路径最短，或者说哪条路径的段数最少？\n\n广度优先搜索中，起点的邻居称为一度关系，其邻居的邻居称为二度关系，搜索顺序是先一度关系，再二度关系，以此类推。在代码实现时，需要使用双端队列来保证搜索顺序。\n\n广度优先搜索的步骤：\n\n 1. 创建一个队列，将起点的所有邻居节点压入到队列中；\n 2. 从队列弹出一个节点，检查这个节点是否终点，如果是，则完成搜索；\n 3. 如果该节点不是终点，则将该节点的所有邻居节点压入上述队列中；\n 4. 回到第2步，继续检查；\n 5. 如果队列为空，说明终点不可达，找不到该路径。\n\n狄克斯特拉算法(Dijkstra)\n> 戴克斯特拉算法（英语：Dijkstra's algorithm，又译迪杰斯特拉算法）由荷兰计算机科学家艾兹赫尔·戴克斯特拉\n[https://zh.wikipedia.org/wiki/%E8%89%BE%E5%85%B9%E8%B5%AB%E5%B0%94%C2%B7%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89]\n在1956年提出。戴克斯特拉算法使用了广度优先搜索\n[https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2]\n解决赋权有向图的单源最短路径问题\n[https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98]\n。该算法存在很多变体；戴克斯特拉的原始版本找到两个顶点之间的最短路径，但是更常见的变体固定了一个顶点作为源节点然后找到该顶点到图中所有其它节点的最短路径，产生一个\n最短路径树\n[https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E6%A0%91]\n。该算法常用于路由 [https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1]\n算法或者作为其他图算法的一个子模块。举例来说，如果图中的顶点表示城市，而边上的权重表示城市间开车行经的距离，该算法可以用来找到两个城市之间的最短路径。\n\n\n广度优先搜索可以找到段数最少的路径，但是无法找到开销最小的路径，狄克斯特拉算法\n[https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95]\n就是用来解决这类问题的。什么是开销，可以理解为总权重，假设从起点出发到节点B需要2小时，那么可以称起点到节点B的开销\n为2。当然，开销也可以是其他的计量单位，例如从起点出发到节点B距离3公里，可以计作起点到节点B的开销为3。\n\n狄克斯特拉算法的步骤：\n\n 1. 找出开销最小的节点，即可以在最短的时间内到达的节点；\n 2. 更新该节点的邻居的开销；\n 3. 重复这个过程，直到图中所有的节点都处理完；\n 4. 计算开销最小的路径。\n\n注：狄克斯特拉算法仅适用于有向无环图\n\n深度优先搜索(Depth-First-Search)\n> 深度优先搜索算法（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树\n[https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)]\n或图 [https://zh.wikipedia.org/wiki/%E5%9B%BE_(%E6%95%B0%E5%AD%A6)]的算法\n[https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95]\n。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。\n\n\n从图G的某个顶点v0出发，访问v0，然后选择一个与v0相邻且没被访问过的顶点vi访问，再从vi出发选择一个与vi相邻且未被访问的顶点vj进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点w，从w出发按同样的方法向前遍历，直到图中所有顶点都被访问。\n\n深度优先搜索的步骤：\n\n 1. 首先将起点放入到队列中；\n 2. 从队列弹出一个节点，并检查它是否为终点，如果是，则完成搜索，返回结果；\n 3. 如果不是终点，则将它某一个没有检查过的邻居节点加入到队列中；\n 4. 回到第2步；\n 5. 如果不存在未检查过的邻居节点，则将其父节点加入队列中，回到第2步；\n 6. 重复第5步；\n 7. 如果队列为空，表示所有的节点都检查过了，完成搜索，返回找不到终点\n\n参考文献\n * 《算法图解》\n * 《算法（第4版）》\n * 维基百科-图 [https://zh.wikipedia.org/wiki/%E5%9B%BE_(%E6%95%B0%E5%AD%A6)]\n * 维基百科-广度优先搜索\n   [https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2]\n * 维基百科-戴克斯特拉算法\n   [https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95]\n * 维基百科-深度优先搜索\n   [https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2]\n * wikipedia-Backtracking [https://en.wikipedia.org/wiki/Backtracking]","feature_image":"__GHOST_URL__/content/images/2021/10/v2-dc1e337068536c7b5b1f400852863b37_1440w.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-10-08 17:08:20","created_by":"1","updated_at":"2021-10-08 17:11:59","updated_by":"1","published_at":"2019-05-28 16:00:00","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null}],"posts_meta":[],"users":[{"id":"1","name":"杨金龙","slug":"jason","password":"$2a$10$Tpx1vvOP/.0fyUBpoV20pOIZfhwMLoDHCStstGvIfWMyDH0UAl8M6","email":"yangjinlong86@126.com","profile_image":"__GHOST_URL__/content/images/2021/10/----_20210821143132-1.jpg","cover_image":null,"bio":null,"website":"http://nocoder.org","location":"成都","facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2021-10-08 17:00:53","created_at":"2021-10-08 16:37:13","created_by":"1","updated_at":"2021-10-08 17:17:25","updated_by":"1"},{"id":"5951f5fca366002ebd5dbef7","name":"Ghost","slug":"ghost","password":"$2a$10$afjt9ypge5iesO3LACe9bemgDfXJf8KtlzXiwlTA8QmuVqwdL/pZm","email":"ghost-author@example.com","profile_image":"__GHOST_URL__/content/images/2021/10/----_20210821143132.jpg","cover_image":null,"bio":"You can delete this user to remove all the welcome posts","website":"https://ghost.org","location":"The Internet","facebook":"ghost","twitter":"@ghost","accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2021-10-08 16:37:14","created_by":"1","updated_at":"2021-10-08 17:15:07","updated_by":"1"}],"posts_authors":[{"id":"616073bb67f6c500012753c6","post_id":"616073bb67f6c500012753c5","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"616073bb67f6c500012753c8","post_id":"616073bb67f6c500012753c7","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"616073bb67f6c500012753ca","post_id":"616073bb67f6c500012753c9","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"616073bc67f6c500012753cc","post_id":"616073bb67f6c500012753cb","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"6160769067f6c50001275528","post_id":"6160769067f6c50001275527","author_id":"1","sort_order":0},{"id":"61607b040af28a00012bf0df","post_id":"61607b040af28a00012bf0de","author_id":"1","sort_order":0}],"roles":[{"id":"616073b867f6c50001275352","name":"Administrator","description":"Administrators","created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"},{"id":"616073b867f6c50001275353","name":"Editor","description":"Editors","created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"},{"id":"616073b867f6c50001275354","name":"Author","description":"Authors","created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"},{"id":"616073b867f6c50001275355","name":"Contributor","description":"Contributors","created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"},{"id":"616073b867f6c50001275356","name":"Owner","description":"Blog Owner","created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"},{"id":"616073b867f6c50001275357","name":"Admin Integration","description":"External Apps","created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"},{"id":"616073b867f6c50001275358","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"},{"id":"616073b867f6c50001275359","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"}],"roles_users":[{"id":"616073bb67f6c500012753b6","role_id":"616073b867f6c50001275355","user_id":"5951f5fca366002ebd5dbef7"},{"id":"616073bc67f6c500012754c8","role_id":"616073b867f6c50001275356","user_id":"1"}],"settings":[{"id":"616073bd67f6c500012754c9","group":"core","key":"db_hash","value":"decdf869-cfc3-4b51-8669-4e68d62417a6","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073bd67f6c500012754ca","group":"core","key":"routes_hash","value":"3d180d52c663d173a6be791ef411ed01","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:22","updated_by":"1"},{"id":"616073bd67f6c500012754cb","group":"core","key":"next_update_check","value":"1633798061","type":"number","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:47:40","updated_by":"1"},{"id":"616073bd67f6c500012754cc","group":"core","key":"notifications","value":"[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"6160783867f6c50001275532\",\"type\":\"warn\",\"message\":\"Ghost is currently unable to send email. See https://ghost.org/docs/concepts/config/#mail for instructions.\",\"seen\":false,\"addedAt\":\"2021-10-08T16:56:24.314Z\"}]","type":"array","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:56:24","updated_by":"1"},{"id":"616073bd67f6c500012754cd","group":"core","key":"session_secret","value":"f5e741290cf5a5f285cfb7032ea99040083c8edaa03ad77114dcffe1bbf939bf","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073bd67f6c500012754ce","group":"core","key":"theme_session_secret","value":"a2283caa624546e5996fb4730b3d20231a43317861e47980ba4a8e14594abdbe","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754cf","group":"core","key":"ghost_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAKIyVOwnRy/UC6Xoqsgw5nIIsOFfjMyYmRyrEO3GpbVHnThagSA+xjVqqsmJaq0p\n2NDoGTnyRX56vvYcL7tzIWzRFgXrkOIsBwOy5RONHoFDLSpuz53VASV7vp003uKsSy2VJhXj\nQY/2UfazuTPEI2w65PItPhhoFGW7ei6XgB7nAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754d0","group":"core","key":"ghost_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCiMlTsJ0cv1Aul6KrIMOZyCLDhX4zMmJkcqxDtxqW1R504WoEgPsY1aqrJ\niWqtKdjQ6Bk58kV+er72HC+7cyFs0RYF65DiLAcDsuUTjR6BQy0qbs+d1QEle76dNN7irEst\nlSYV40GP9lH2s7kzxCNsOuTyLT4YaBRlu3oul4Ae5wIDAQABAoGATtUhu2nXyqJISwoLv6Ms\nzi31MoULXQGqIWnvn3HWZoZ5HsO2UOLR2XKPscatZ56YN+knIafkKPYlzF6kwHnTu1TX4eSk\nsZGjjaLw+JnQhPsuOvK6r2hiwDYLHafpDeiuE8fL3N28pRFSpzH/c8D8AgbZeI7lRu8uYDrM\nShCa/5kCQQDqdn8IaIgLnrOJtmom6BYKa1WLvXwWmf6XyedNg+mAW3rxR+U3DCt1iCCvgLO1\nOt/wPGtAX5P633wAcPeV1N4dAkEAsRh15q5dsTtWGJ8PzKRjv/HJb0kvAQ1FLunjIqNUx1Bv\nPEhu0T8iiUsxsDrNAAzPfU2P2fGO4QIXnrnNnHex0wJARKveOx06s4SQ+0XFQ434XqbfUGV4\nQbpq2hRVvdtj+adRk/fFx+C1nd/4Cs88U1liG5/mnd0gn3rze8GaknTddQJBAK8ww3GwjH8H\nc+Rndfm7pfH7/olYnGct+YKvXUKm0PdbWq8H+JiHHGM1P7JWePXTtm7+i4/OpslwiG084Won\n/oECQCYnPpKRdyBtL3Dd1AgUf2wgKYSkvu/CeYjqHIBX2/cnyBvwPa1l8tnC5e0B0BukVwj5\nRnOzyAEvfQvgF/TI2LY=\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754d1","group":"core","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAJL8tw0Uv7XFLq8s+vr6l1bXCLlzuu0zI5zSxd4REhdbwpFb2hX+7KdXsXsUJce4\nlgVMBilwKQRPXR9ldN+jM8WAinpSkMWaJJ/T+TD1LANFoVbpQvFws+Ep/iubuN/w9oQ6FBb0\napUwIce4QCs3ZnjHmCEIYd+fH2hW3tUlYq5xAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754d2","group":"core","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCS/LcNFL+1xS6vLPr6+pdW1wi5c7rtMyOc0sXeERIXW8KRW9oV/uynV7F7\nFCXHuJYFTAYpcCkET10fZXTfozPFgIp6UpDFmiSf0/kw9SwDRaFW6ULxcLPhKf4rm7jf8PaE\nOhQW9GqVMCHHuEArN2Z4x5ghCGHfnx9oVt7VJWKucQIDAQABAoGATyGCIqay9taq5V/f1lIm\nO3gUmFJ3pc9MMtc98ulZxf1+Z+b9J65QFV8ei1YzaKw1B7D/+DsLuehIB+kE3IjuC2riZyV2\nfNrs7BFJlVYRWFP5lXZ4JOGVbw3rlrjxt5u9VW/fvI1O1t+C+g/Rqa7qcHU4U5+12IOGiGUZ\nKrNLUIkCQQDD6bMKowMiXw+QZ2fWRSA1wf8+B7BWBgZW9r9KaL+VJX8I09bPV/zwh4XzusGD\nYKJcLsuy3FhXNCaUUPPi2QiXAkEAwBGQEKvJkXzs7w5gzIsZEJWKUGugWJzQQAG+kNeAZpPJ\nf0k+pH1EvvGBCF13SCvc1hD+q5Rbk4+Dymh/1wGaNwJBAK0mJSlnfWOpZJYZ7joACkG43Z+z\nJ/Q/iubdWZ+oCHsHEsl4gMfsWg8zl/4btuAoThbu/PVtrV4VJ2u6SHLboq0CQEvoZQSBsDck\npUtRZmZQbwaD41cnQgbjatZxGgyKbv+bVt5MZ0qBC6NfNPzGW7cVRsD/lHbhOlQWOyLKrAOg\naX8CQEtGLdXkf30PY/SspMBuMu4oos9x5MJ0x4I6x6Nj2eiRLk8gBv0Lkk731sx4lHI3MHLx\npC/8oK8uqvFh2o5djes=\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754d3","group":"core","key":"members_email_auth_secret","value":"4db94a26d45df2ab838e3b3d30e44bc75028f741ba295845fd5df49893e0f78838aeb31ca6ba42950dff89314c8b760868a216bf202b310b5d3a3c668944da1f","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754d6","group":"site","key":"title","value":"Nocoder Blog","type":"string","flags":"PUBLIC","created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:48:24","updated_by":"1"},{"id":"616073be67f6c500012754d7","group":"site","key":"description","value":"站在巨人的肩膀上","type":"string","flags":"PUBLIC","created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:52:26","updated_by":"1"},{"id":"616073be67f6c500012754d8","group":"site","key":"logo","value":"","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754d9","group":"site","key":"cover_image","value":"https://static.ghost.org/v4.0.0/images/publication-cover.jpg","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754da","group":"site","key":"icon","value":"","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754db","group":"site","key":"accent_color","value":"#3188e8","type":"string","flags":"PUBLIC","created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 17:02:39","updated_by":"1"},{"id":"616073be67f6c500012754dc","group":"site","key":"lang","value":"en","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754dd","group":"site","key":"timezone","value":"Asia/Hong_Kong","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:52:26","updated_by":"1"},{"id":"616073be67f6c500012754de","group":"site","key":"codeinjection_head","value":"","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754df","group":"site","key":"codeinjection_foot","value":"","type":"string","flags":null,"created_at":"2021-10-08 16:37:18","created_by":"1","updated_at":"2021-10-08 16:37:18","updated_by":"1"},{"id":"616073be67f6c500012754e0","group":"site","key":"facebook","value":"ghost","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754e1","group":"site","key":"twitter","value":"@ghost","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754e2","group":"site","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"http://nocoder.org\"},{\"label\":\"About\",\"url\":\"http://nocoder.org/about/\"},{\"label\":\"Author\",\"url\":\"http://nocoder.org/author/ghost/\"}]","type":"array","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 17:13:17","updated_by":"1"},{"id":"616073be67f6c500012754e3","group":"site","key":"secondary_navigation","value":"[{\"label\":\"Data & privacy\",\"url\":\"http://nocoder.org/privacy/\"},{\"label\":\"Contact\",\"url\":\"http://nocoder.org/contact/\"},{\"label\":\"Contribute →\",\"url\":\"http://nocoder.org/contribute/\"}]","type":"array","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:53:21","updated_by":"1"},{"id":"616073be67f6c500012754e4","group":"site","key":"meta_title","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754e5","group":"site","key":"meta_description","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754e6","group":"site","key":"og_image","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754e7","group":"site","key":"og_title","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754e8","group":"site","key":"og_description","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754e9","group":"site","key":"twitter_image","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754ea","group":"site","key":"twitter_title","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754eb","group":"site","key":"twitter_description","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754ec","group":"theme","key":"active_theme","value":"casper","type":"string","flags":"RO","created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754ed","group":"private","key":"is_private","value":"false","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754ee","group":"private","key":"password","value":"","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754ef","group":"private","key":"public_hash","value":"b6353c851c0e2e42064f98d9d09e5f","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754f0","group":"members","key":"default_content_visibility","value":"public","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754f1","group":"members","key":"members_signup_access","value":"all","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754f2","group":"members","key":"members_from_address","value":"noreply","type":"string","flags":"RO","created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754f3","group":"members","key":"members_support_address","value":"noreply","type":"string","flags":"PUBLIC,RO","created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754f4","group":"members","key":"members_reply_address","value":"newsletter","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754f5","group":"members","key":"members_free_signup_redirect","value":"/","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754f6","group":"members","key":"members_paid_signup_redirect","value":"/","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754f7","group":"members","key":"stripe_product_name","value":"Ghost Subscription","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754fa","group":"members","key":"stripe_plans","value":"[]","type":"array","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754fd","group":"members","key":"stripe_connect_livemode","value":null,"type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c500012754fe","group":"members","key":"stripe_connect_display_name","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275500","group":"members","key":"members_free_price_name","value":"Free","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275501","group":"members","key":"members_free_price_description","value":"Free preview","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275502","group":"members","key":"members_monthly_price_id","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275503","group":"members","key":"members_yearly_price_id","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275504","group":"portal","key":"portal_name","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275505","group":"portal","key":"portal_button","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275506","group":"portal","key":"portal_plans","value":"[\"free\"]","type":"array","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275507","group":"portal","key":"portal_products","value":"[]","type":"array","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275508","group":"portal","key":"portal_button_style","value":"icon-and-text","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275509","group":"portal","key":"portal_button_icon","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127550a","group":"portal","key":"portal_button_signup_text","value":"Subscribe","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127550b","group":"email","key":"mailgun_domain","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127550c","group":"email","key":"mailgun_api_key","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127550d","group":"email","key":"mailgun_base_url","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127550e","group":"email","key":"email_track_opens","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275510","group":"amp","key":"amp","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275511","group":"amp","key":"amp_gtag_id","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275512","group":"firstpromoter","key":"firstpromoter","value":"false","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275513","group":"firstpromoter","key":"firstpromoter_id","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275514","group":"labs","key":"labs","value":"{}","type":"object","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275515","group":"slack","key":"slack_url","value":"","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 17:13:17","updated_by":"1"},{"id":"616073be67f6c50001275516","group":"slack","key":"slack_username","value":"Ghost","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 17:13:17","updated_by":"1"},{"id":"616073be67f6c50001275517","group":"unsplash","key":"unsplash","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275518","group":"views","key":"shared_views","value":"[]","type":"array","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275519","group":"newsletter","key":"newsletter_show_badge","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127551a","group":"newsletter","key":"newsletter_header_image","value":null,"type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127551b","group":"newsletter","key":"newsletter_show_header_icon","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127551c","group":"newsletter","key":"newsletter_show_header_title","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127551d","group":"newsletter","key":"newsletter_title_alignment","value":"center","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127551e","group":"newsletter","key":"newsletter_title_font_category","value":"sans_serif","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c5000127551f","group":"newsletter","key":"newsletter_show_feature_image","value":"true","type":"boolean","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275520","group":"newsletter","key":"newsletter_body_font_category","value":"sans_serif","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275521","group":"newsletter","key":"newsletter_footer_content","value":"","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275524","group":"editor","key":"editor_default_email_recipients","value":"visibility","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"},{"id":"616073be67f6c50001275525","group":"editor","key":"editor_default_email_recipients_filter","value":"all","type":"string","flags":null,"created_at":"2021-10-08 16:37:19","created_by":"1","updated_at":"2021-10-08 16:37:19","updated_by":"1"}],"tags":[{"id":"616073b867f6c50001275351","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-10-08 16:37:12","created_by":"1","updated_at":"2021-10-08 16:37:12","updated_by":"1"}],"posts_tags":[],"custom_theme_settings":[]}}